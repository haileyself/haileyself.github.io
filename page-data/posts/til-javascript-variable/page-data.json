{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til-javascript-variable/","result":{"data":{"markdownRemark":{"id":"63bf0406-d8a8-521b-b757-88689876520c","html":"<p>자바스크립트 공부를 진행하며\n배운 변수 var / let / const에 대해 정리하는 글입니다 !</p>\n<h2 id=\"변수의-종류\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"변수의 종류 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수의 종류</h2>\n<h3 id=\"1-var-전역변수\"><a href=\"#1-var-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98\" aria-label=\"1 var 전역변수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. var 전역변수</h3>\n<ul>\n<li>var의 scope는 global\n(함수밖에서 정의 된 변수가 함수 안에서도 사용가능하고,whole window 안에서 사용 다 가능한 것)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"hey hi\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> times <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>times <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"say Hello instead\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//출력: \"say Hello instead\"</span></code></pre></div>\n<p>변수 greeting 이 {} 안에서 재정의 되었는데… 값이 바뀌어버림\n동일한 변수명쓰면, 값이 달라지는 에러 등이 발생할 수 있음\n-> let 과 const의 사용이 필수적임!</p>\n<ul>\n<li>변수 var는 중복 사용 가능(여러번 값 할당가능)</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/haileyself/5cd00920-faf5-11e9-a375-835ec727f36f/image.png\" alt=\"image.png\"></p>\n<h3 id=\"2-let\"><a href=\"#2-let\" aria-label=\"2 let permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. let</h3>\n<ul>\n<li>let은 ES6부터 사용되는 local variable (지역변수)</li>\n<li>block level scope를 가짐 -> block안에서만 역할 가능 !</li>\n<li>block은 { } 로 묶인 공간이며 이런 변수는 scope가 정해진 경우, 해당 scope에서만 변수역할을 할 수 있음!\n(예를 들어 function안에서 let을 통해 변수를 정해줬는데\n내가 함수 밖에서 해당 변수를 호출하면 해당변수는 undefined으로 나옴! 값이 나오지않는다~~)</li>\n<li>변수로 저장된 데이터 값을 바꿀 수 있음(값 update 가능)</li>\n<li>같은 scope 내에서 redeclaration 안됨 !</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"say Hi\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"say Hello instead\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// error : 이미 declared된 것이다 라는 에러 뜸</span>\n\n<span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 출력값 : 2 와 1</span>\n<span class=\"token comment\">// 다른 block에서 선언되었기때문에 에러메세지 뜨지 않음</span>\n<span class=\"token comment\">// scope가 block으로 한정된 다는 것을 확인 가능</span></code></pre></div>\n<h3 id=\"3-const\"><a href=\"#3-const\" aria-label=\"3 const permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. const</h3>\n<ul>\n<li>const도 ES6부터 등장한 지역변수</li>\n<li>block level scope</li>\n<li>변수로 저장된 데이터 값을 바꿀 수 없음(reassignment 불가)</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/haileyself/e26c7bd0-faf6-11e9-8e8c-85968af1b216/image.png\" alt=\"image.png\"></p>\n<ul>\n<li>같은 scope에서 redeclaration 안됨!</li>\n<li>mutable state를 줄이기 최소화하기 위해서 const 사용</li>\n</ul>\n<p><strong>일단은 const를 통해서 변수를 쓰는 습관을 들이고, 나중에 수정할 일 있을 때 let으로 변경해주면 된다 !</strong></p>\n<h3 id=\"4-호이스팅hoisting\"><a href=\"#4-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85hoisting\" aria-label=\"4 호이스팅hoisting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 호이스팅(Hoisting)</h3>\n<p>자바스크립트에서 변수가 호출된 이후에 변수가 선언되었음에도 불구하고, 변수선언이 호출 이전에 된 것처럼 실행되는 현상\n(scope 내에서 변수선언부분이 아래에 적혀있어도, 맨 위에 선언된 것 처럼 일어나는 현상)</p>\n<h4 id=\"1-var의-호이스팅\"><a href=\"#1-var%EC%9D%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"1 var의 호이스팅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. var의 호이스팅</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//출력값: undefined;</span></code></pre></div>\n<ul>\n<li>var는 변수가 선언되면, 선언과 초기화(undefined)가 한번에 이루어진다. 이를 통해 선언되는 순간 변수가 실행되고, 초기화를 통해 변수 객체에 등록된 변수를 위한 공간을 메모리에 확보한다.\n-> undefined으로 일단 선언됨(값 할당 전)\n-> error msg가 “undefined”로 뜸</li>\n</ul>\n<h4 id=\"2-let-const의-호이스팅\"><a href=\"#2-let-const%EC%9D%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"2 let const의 호이스팅 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. let, const의 호이스팅</h4>\n<ul>\n<li>let 과 const도 호이스팅이 발생</li>\n<li>let / const는 선언과 초기화가 분리되어서 발생</li>\n<li>초기화 전까지 변수참조가 없고, 이래서 참조에러가 발생함(scope에 변수가 등록되었으나, 공간을 메모리에 확보하지 못하여 변수를 참조할 수 없는 이 사이를 TDZ(Temporal Dead Zone)이라고 부름</li>\n<li>에러메세지가 var와 달리, 초기화 이전이다라고 뜸 !</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/haileyself/3a5f5370-faf8-11e9-98ed-4f42a40f0442/image.png\" alt=\"image.png\"></p>","fields":{"slug":"/posts/til-javascript-variable/","tagSlugs":["/tag/til/","/tag/javascript/","/tag/변수/"]},"frontmatter":{"date":"2019-08-08T20:30:37.121Z","description":"JavaScript 변수 var, let, const","tags":["TIL","JAVASCRIPT","변수"],"title":"JavaScript 변수 var, let, const"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til-javascript-variable/"}}}